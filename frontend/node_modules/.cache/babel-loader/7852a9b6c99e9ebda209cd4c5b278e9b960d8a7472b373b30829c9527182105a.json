{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Acer\\\\Desktop\\\\SE_REVIEW\\\\SE_Group4\\\\frontend\\\\src\\\\pages\\\\AddGreaseProductForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './AddGreaseProductForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddGreaseProductForm({\n  onAddProduct\n}) {\n  _s();\n  const navigate = useNavigate();\n  const [formData, setFormData] = useState({\n    name: '',\n    category: '',\n    price: '',\n    stock: '',\n    image: '',\n    offer: false\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n\n    // Format price input with INR validation\n    if (name === 'price') {\n      const numericValue = value.replace(/[^0-9.]/g, '');\n      setFormData(prev => ({\n        ...prev,\n        [name]: numericValue\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [name]: type === 'checkbox' ? checked : value\n      }));\n    }\n  };\n  const validateForm = () => {\n    if (!formData.name.trim()) return 'Product name is required';\n    if (!formData.category.trim()) return 'Category is required';\n    if (!formData.price || isNaN(formData.price) || parseFloat(formData.price) <= 0) return 'Valid price is required';\n    if (!formData.stock || isNaN(formData.stock) || parseInt(formData.stock) < 0) return 'Valid stock quantity is required';\n    if (!formData.image.trim()) return 'Image URL is required';\n    return null;\n  };\n  const formatINR = amount => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 2\n    }).format(amount);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setError('');\n    setSuccess('');\n    const validationError = validateForm();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n    setLoading(true);\n    try {\n      const numericData = {\n        ...formData,\n        price: parseFloat(formData.price),\n        stock: parseInt(formData.stock, 10)\n      };\n      const response = await fetch('http://localhost:5000/api/grease', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(numericData)\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSuccess(`Product added successfully! Price: ${formatINR(numericData.price)}`);\n        setFormData({\n          name: '',\n          category: '',\n          price: '',\n          stock: '',\n          image: '',\n          offer: false\n        });\n        onAddProduct();\n        setTimeout(() => setSuccess(''), 3000);\n      } else {\n        setError(data.error || 'Failed to add product');\n      }\n    } catch (error) {\n      setError('An error occurred while adding the product');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"add-grease-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add New Grease Product\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-message alert-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 23\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-message alert-success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"add-grease-form\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Price (\\u20B9):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"price-input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"currency-symbol\",\n            children: \"\\u20B9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"price\",\n            placeholder: \"Enter price in INR\",\n            value: formData.price,\n            onChange: handleChange,\n            inputMode: \"numeric\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(AddGreaseProductForm, \"NQtfBGEOtFj1ep6rOd7D0AaiC/Q=\", false, function () {\n  return [useNavigate];\n});\n_c = AddGreaseProductForm;\nexport default AddGreaseProductForm;\nvar _c;\n$RefreshReg$(_c, \"AddGreaseProductForm\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","AddGreaseProductForm","onAddProduct","_s","navigate","formData","setFormData","name","category","price","stock","image","offer","loading","setLoading","error","setError","success","setSuccess","handleChange","e","value","type","checked","target","numericValue","replace","prev","validateForm","trim","isNaN","parseFloat","parseInt","formatINR","amount","Intl","NumberFormat","style","currency","maximumFractionDigits","format","handleSubmit","preventDefault","validationError","numericData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","placeholder","onChange","inputMode","_c","$RefreshReg$"],"sources":["C:/Users/Acer/Desktop/SE_REVIEW/SE_Group4/frontend/src/pages/AddGreaseProductForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './AddGreaseProductForm.css';\r\n\r\nfunction AddGreaseProductForm({ onAddProduct }) {\r\n    const navigate = useNavigate();\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        category: '',\r\n        price: '',\r\n        stock: '',\r\n        image: '',\r\n        offer: false,\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [success, setSuccess] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value, type, checked } = e.target;\r\n        \r\n        // Format price input with INR validation\r\n        if (name === 'price') {\r\n            const numericValue = value.replace(/[^0-9.]/g, '');\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                [name]: numericValue\r\n            }));\r\n        } else {\r\n            setFormData(prev => ({\r\n                ...prev,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            }));\r\n        }\r\n    };\r\n\r\n    const validateForm = () => {\r\n        if (!formData.name.trim()) return 'Product name is required';\r\n        if (!formData.category.trim()) return 'Category is required';\r\n        if (!formData.price || isNaN(formData.price) || parseFloat(formData.price) <= 0) \r\n            return 'Valid price is required';\r\n        if (!formData.stock || isNaN(formData.stock) || parseInt(formData.stock) < 0) \r\n            return 'Valid stock quantity is required';\r\n        if (!formData.image.trim()) return 'Image URL is required';\r\n        return null;\r\n    };\r\n\r\n    const formatINR = (amount) => {\r\n        return new Intl.NumberFormat('en-IN', {\r\n            style: 'currency',\r\n            currency: 'INR',\r\n            maximumFractionDigits: 2\r\n        }).format(amount);\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setError('');\r\n        setSuccess('');\r\n        \r\n        const validationError = validateForm();\r\n        if (validationError) {\r\n            setError(validationError);\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            const numericData = {\r\n                ...formData,\r\n                price: parseFloat(formData.price),\r\n                stock: parseInt(formData.stock, 10)\r\n            };\r\n\r\n            const response = await fetch('http://localhost:5000/api/grease', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(numericData),\r\n            });\r\n\r\n            const data = await response.json();\r\n            \r\n            if (response.ok) {\r\n                setSuccess(`Product added successfully! Price: ${formatINR(numericData.price)}`);\r\n                setFormData({\r\n                    name: '',\r\n                    category: '',\r\n                    price: '',\r\n                    stock: '',\r\n                    image: '',\r\n                    offer: false,\r\n                });\r\n                onAddProduct();\r\n                setTimeout(() => setSuccess(''), 3000);\r\n            } else {\r\n                setError(data.error || 'Failed to add product');\r\n            }\r\n        } catch (error) {\r\n            setError('An error occurred while adding the product');\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"add-grease-container\">\r\n            <h2>Add New Grease Product</h2>\r\n            \r\n            {error && <div className=\"alert-message alert-error\">{error}</div>}\r\n            {success && <div className=\"alert-message alert-success\">{success}</div>}\r\n\r\n            <form onSubmit={handleSubmit} className=\"add-grease-form\">\r\n                {/* Other form groups remain same */}\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Price (₹):</label>\r\n                    <div className=\"price-input-group\">\r\n                        <span className=\"currency-symbol\">₹</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"price\"\r\n                            placeholder=\"Enter price in INR\"\r\n                            value={formData.price}\r\n                            onChange={handleChange}\r\n                            inputMode=\"numeric\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Rest of the form remains similar */}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddGreaseProductForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}